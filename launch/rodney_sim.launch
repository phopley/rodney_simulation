<?xml version="1.0" ?>
<launch>     
  <!-- Load the URDF model in to the parameter server from the xacro file -->
  <arg name="model" default="$(find rodney)/urdf/rodney.xacro"/>
  <param name="robot_description" command="$(find xacro)/xacro --inorder $(arg model)"/>    
    
  <!-- Launch Gazebo with an williw garage world -->
  <include file="$(find gazebo_ros)/launch/willowgarage_world.launch"/>
    
  <!-- Spawn the robot into the world -->-
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-param robot_description -urdf -model rodney -x 8 -y -8 -z 0.090"/>
    
  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find rodney_simulation)/config/rondey_sim_control.yaml" command="load"/>

  <!-- load the controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="head_controller"/>

  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>

  <!-- Launch rviz --> 
  <arg name="rvizconfig" default="$(find rodney_simulation)/rviz/urdf.rviz"/>       
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)"/>
  
  <rosparam command="load" file="$(find head_control)/config/common_config.yaml" />
  <rosparam command="load" file="$(find pan_tilt)/config/common_config.yaml" />
  <rosparam command="load" file="$(find face_recognition)/config/config.yaml"/>
  <arg name="map_file" default="willowgarage_world"/>
  
  <!-- Launch the Rodney code that we will use in this simulation -->   
  <node pkg="rodney" type="rodney_node" name="rodney" args="-m $(find rodney_simulation)/maps/$(arg map_file)_patrol.yaml" output="screen">
    <rosparam command="load" file="$(find rodney)/config/config.yaml"/> 
  </node>
  <node pkg="rodney_missions" type="rodney_missions_node.py" name="rodney_missions" output="screen">
    <rosparam command="load" file="$(find rodney_missions)/config/config.yaml"/>
  </node>
  <node pkg="head_control" type="head_control_node" name="head_control_node">
    <rosparam command="load" file="$(find head_control)/config/config.yaml"/>
  </node>  
  <node pkg="face_recognition" type="face_recognition_node.py" name="face_recognition_node"/>
  <node pkg="rodney" type="static_broadcaster.py" name="static_broadcaster_node"/>
    
  <!-- Launch method for remote control -->
  <arg name="web_control" default="false"/>
  <group if="$(arg web_control)">
    <!-- Remote using web browser. The bridge could be launched anyway but just not used -->
    <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch"/>
    <node pkg="rqt_console" type="rqt_console" name="rqt_console"/> 
  </group>
  <group unless="$(arg web_control)">
    <!-- Remote using keyboard and joystick -->
    <include file="$(find rodney)/launch/remote.launch"/>    
  </group>
  
  <!-- Uncomment to include the launching of the video server -->
  <!-- <node pkg="web_video_server" type="web_video_server" name="web_video_server"/> -->   
  
  <!-- rodney and rodney_missions wait on a number of services tobecome available so we need to simulate them -->
  <node pkg="rodney_simulation" type="simulation_node.py" name="simulation_node"/>

  <!-- Navigation -->
  <arg name="no_nav" default="false"/>  
  <group unless="$(arg no_nav)"> 
    <node pkg="map_server" type="map_server" name="map_server" args="$(find rodney_simulation)/maps/$(arg map_file).yaml" output="screen"/>  
    <node pkg="amcl" type="amcl" name="amcl" output="screen">
      <rosparam command="load" file="$(find rodney)/config/amcl_config.yaml"/>
    </node>
    <node pkg="move_base" type="move_base" name="move_base" respawn="false" output="screen">
      <rosparam command="load" file="$(find rodney)/config/base_local_planner_params.yaml"/>
      <rosparam command="load" file="$(find rodney)/config/costmap_common_params.yaml" ns="global_costmap"/>
      <rosparam command="load" file="$(find rodney)/config/costmap_common_params.yaml" ns="local_costmap"/>
      <rosparam command="load" file="$(find rodney)/config/global_costmap_params.yaml"/> 
      <rosparam command="load" file="$(find rodney)/config/local_costmap_params.yaml"/>      
      <remap from="cmd_vel" to="demand_vel"/>
    </node>   
  </group>     

</launch>

